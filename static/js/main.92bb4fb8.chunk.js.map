{"version":3,"sources":["components/NavBar.js","components/Course.js","components/CoursesList.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","position","Toolbar","Typography","variant","color","Course","props","console","log","course","Card","style","padding","CardMedia","height","paddingTop","image","fields","courseImage","file","url","title","CardContent","gutterBottom","component","description","CardActions","Button","size","href","target","client","contentful","space","accessToken","CoursesList","state","courses","searchString","getCourses","getEntries","content_type","query","then","response","setState","items","catch","error","onSearchInputChange","event","value","this","TextField","id","placeholder","margin","onChange","Grid","container","spacing","map","currentCourse","item","xs","sm","lg","xl","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6RAiBeA,EAbA,WACX,OACI,6BACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,WAAlC,6D,uEC0BDC,EA5BA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GAER,6BACMA,EAAMG,OACJ,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,QAAQ,KAClB,kBAACC,EAAA,EAAD,CAAWF,MAAO,CAACG,OAAQ,EAAGC,WAAY,UAC1CC,MAAOV,EAAMG,OAAOQ,OAAOC,YAAYD,OAAOE,KAAKC,IACnDC,MAAOf,EAAMG,OAAOQ,OAAOI,QAE3B,kBAACC,EAAA,EAAD,KACA,kBAACpB,EAAA,EAAD,CAAYqB,cAAY,EAACpB,QAAQ,WAAWqB,UAAU,MACjDlB,EAAMG,OAAOQ,OAAOI,OAEzB,kBAACnB,EAAA,EAAD,CAAYsB,UAAU,KACjBlB,EAAMG,OAAOQ,OAAOQ,cAGzB,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQxB,MAAM,UAAUyB,KAAMvB,EAAMG,OAAOQ,OAAOG,IAAKU,OAAO,UAA3E,kBAKJ,OCxBVC,EAASC,IAAwB,CACnCC,MAHa,eAIbC,YAHiB,gDAqFNC,E,kDA3EX,aAAe,IAAD,8BACV,gBALJC,MAAQ,CACJC,QAAS,GACTC,aAAc,IAEJ,EAIdC,WAAa,WACTR,EAAOS,WAAW,CACdC,aAAc,SACdC,MAAO,EAAKN,MAAME,eAErBK,MAAK,SAACC,GACH,EAAKC,SAAS,CAACR,QAASO,EAASE,QACjCvC,QAAQC,IAAI,EAAK4B,MAAMC,YAE1BU,OAAM,SAACC,GACNzC,QAAQC,IAAI,yCACZD,QAAQyC,MAAMA,OAfN,EAkBdC,oBAAsB,SAACC,GACnB3C,QAAQC,IAAI,qBAAuB0C,EAAMpB,OAAOqB,OAC5CD,EAAMpB,OAAOqB,MACb,EAAKN,SAAS,CAACP,aAAcY,EAAMpB,OAAOqB,QAE1C,EAAKN,SAAS,CAACP,aAAc,KAEjC,EAAKC,cAvBL,EAAKA,aAFK,E,qDAmDV,OACI,6BACMa,KAAKhB,MAAMC,QACT,yBAAK1B,MAAO,CAACC,QAAQ,KACjB,kBAACyC,EAAA,EAAD,CAAW1C,MAAO,CAACC,QAAS,IACxB0C,GAAG,cACHC,YAAY,qBACZC,OAAO,SACPC,SAAUL,KAAKH,sBAEnB,kBAACS,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAIjD,MAAO,CAACC,QAAS,KACxCwC,KAAKhB,MAAMC,QAAQwB,KAAI,SAAAC,GAAa,OAClC,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGxD,MAAO,CAACC,QAAQ,KACpD,kBAAC,EAAD,CAAQH,OAAQqD,UAKhC,wB,GA1EMM,aC4BXC,E,uKARX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUD,aCjBEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdrC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMqC,a","file":"static/js/main.92bb4fb8.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nconst NavBar = () => {\r\n    return(\r\n        <div>\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"title\" color=\"inherit\">\r\n                React & Material-UI Sample Application By Pavan Vanam\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar;","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nconst Course = (props) => {\r\n    console.log(props)\r\n    return(\r\n        <div>\r\n            { props.course ? (\r\n                <Card style={{padding:20}}>\r\n                    <CardMedia style={{height: 0, paddingTop: '56.25%'}}\r\n                    image={props.course.fields.courseImage.fields.file.url}\r\n                    title={props.course.fields.title}\r\n                    />\r\n                    <CardContent>\r\n                    <Typography gutterBottom variant=\"headline\" component=\"h2\">\r\n                        {props.course.fields.title}\r\n                    </Typography>\r\n                    <Typography component=\"p\">\r\n                        {props.course.fields.description}\r\n                    </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                    <Button size=\"small\" color=\"primary\" href={props.course.fields.url} target=\"_blank\">\r\n                        Go To Course\r\n                    </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            ) : null}\r\n        </div>\r\n    )\r\n}\r\nexport default Course","import React, { Component } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as contentful from 'contentful';\r\nimport Course from './Course';\r\nconst SPACE_ID = 'd2clelnoag5l';\r\nconst ACCESS_TOKEN = 'ZL2vNAXo0fZ8fMJRST1tWD9u5MAmxTyr1sD0mNmOfSA';\r\nconst client = contentful.createClient({\r\n    space: SPACE_ID,\r\n    accessToken: ACCESS_TOKEN\r\n})\r\nclass CoursesList extends Component { \r\n    state = {\r\n        courses: [],\r\n        searchString: ''\r\n    }    \r\n    constructor() {\r\n        super()\r\n        this.getCourses()\r\n    }    \r\n    getCourses = () => {\r\n        client.getEntries({\r\n            content_type: 'course',\r\n            query: this.state.searchString\r\n        })\r\n        .then((response) => {\r\n            this.setState({courses: response.items})\r\n            console.log(this.state.courses)\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error occurred while fetching Entries\")\r\n          console.error(error)\r\n        })\r\n    }   \r\n    onSearchInputChange = (event) => {\r\n        console.log(\"Search changed ...\" + event.target.value)\r\n        if (event.target.value) {\r\n            this.setState({searchString: event.target.value})\r\n        } else {\r\n            this.setState({searchString: ''})\r\n        }\r\n        this.getCourses()\r\n    }    \r\n    // render() {\r\n    //     return (\r\n    //         <div>\r\n    //             { this.state.courses ? (\r\n    //                 <div>\r\n    //                     <TextField style={{padding: 24}}\r\n    //                         id=\"searchInput\"\r\n    //                         placeholder=\"Search for Courses\"   \r\n    //                         margin=\"normal\"\r\n    //                         onChange={this.onSearchInputChange}\r\n    //                         />\r\n    //                     <Grid container spacing={24} style={{padding: 24}}>\r\n    //                         { this.state.courses.map(currentCourse => (\r\n    //                             <Grid item xs={12} sm={6} lg={4} xl={3}>\r\n    //                                 <Course course={currentCourse} />\r\n    //                             </Grid>\r\n    //                         ))}\r\n    //                     </Grid>\r\n    //                 </div>\r\n    //             ) : \"No courses found\" }\r\n    //         </div>\r\n    //     )\r\n    // }\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.state.courses ? (\r\n                    <div style={{padding:20}}>\r\n                        <TextField style={{padding: 24}}\r\n                            id=\"searchInput\"\r\n                            placeholder=\"Search for Courses\"   \r\n                            margin=\"normal\"\r\n                            onChange={this.onSearchInputChange}\r\n                            />\r\n                        <Grid container spacing={24} style={{padding: 24}}>\r\n                            { this.state.courses.map(currentCourse => (\r\n                                <Grid item xs={12} sm={6} lg={4} xl={3} style={{padding:20}}>\r\n                                    <Course course={currentCourse} />\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </div>\r\n                ) : \"No courses found\" }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CoursesList;","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { Component } from 'react'\nimport NavBar from './components/NavBar'\nimport CoursesList from './components/CoursesList'\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <CoursesList />\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}